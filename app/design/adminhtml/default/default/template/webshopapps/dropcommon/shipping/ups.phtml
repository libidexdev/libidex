<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2013 Zowta Ltd (http://www.WebShopApps.com)
 *              Copyright, 2013, Zowta, LLC - US license
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */


$orShipArr = Mage::getSingleton('usa/shipping_carrier_ups')->getCode('originShipment');

$defShipArr = Mage::getSingleton('usa/shipping_carrier_ups')->getCode('method');


//$storedAllowedMethods = Mage::getStoreConfig('carriers/ups/allowed_methods');
$storedAllowedMethods = Mage::registry('dropship_data')->getUpsAllowedMethods();
if (!is_array($storedAllowedMethods)) {
	$storedAllowedMethods= array();
}
//$storedAllowedMethods = explode(',',$storedAllowedMethods);
$storedOriginShipment = Mage::getStoreConfig('carriers/ups/origin_shipment');
//$storedFreeShipment = Mage::getStoreConfig('carriers/ups/free_method');

?>
<script type="text/javascript">
//<![CDATA[
    originShipmentObj = new Object();


    <?php
    //get origin shipment data, using in UPS XML module
        foreach ($orShipArr as $key=>$val){
            print "originShipmentObj['$key'] = new Object();\n";
            foreach ($val as $code=>$label){
                print "\toriginShipmentObj['$key']['$code'] = '$label';\n";
            }
        }
    ?>
    //get default shipment data, using in UPS module
    <?php
        print "originShipmentObj['default'] = new Object();\n";
        foreach ($defShipArr as $code=>$label){
            print "\toriginShipmentObj['default']['$code'] = '$label';\n";
        }
    ?>
    //get stored Allowed Methods
    <?php
    print "storedAllowedMethods = new Array();\n";
        foreach ($storedAllowedMethods as $code){
            print "\tstoredAllowedMethods.push('$code');\n";
        }
    ?>
    //set stored origin shipment
    <?php
        print "storedOriginShipment='$storedOriginShipment'";
    ?>

    //set stored Free origin shipment
  //  <?php
   //     print "storedFreeShipment='$storedFreeShipment'";
  //  ?>


    function hideRowArrayElements(arr,method)
    {
        for(a=0;a<arr.length;a++){
            $(arr[a]).up(1).hide();
        }
    }

    function showRowArrayElements(arr,method)
    {
        for(a=0;a<arr.length;a++){
            $(arr[a]).up(1).show();
        }
    }

    function inArray(arr,value)
    {
        var i;
        for (i=0; i < arr.length; i++) {
                if (arr[i] === value) {
                        return true;
                }
        }
        return false;
    }

    var upsXml = Class.create();
    upsXml.prototype = {
        initialize : function()
        {

                this.originShipmentTitle = '';
                this.allowedMethodsId = 'ups_allowed_methods';
                this.freeShipmentId = 'ups_free_method';
                this.onlyUpsXmlElements = new Array('ups_shipping_origin');
                storedOriginShipment = $F('ups_shipping_origin');
                var allowedObj = $(this.allowedMethodsId);

                var selectedArray = new Array();
                var i;
                var count = 0;
                for (i=0; i<allowedObj.options.length; i++) {
                  if (allowedObj.options[i].selected) {
                    selectedArray[count] = allowedObj.options[i].value;
                    count++;
                  }
                }
                storedAllowedMethods = selectedArray;
                              
                this.setFormValues();

        },
        updateAllowedMethods: function(originShipmentTitle)
        {
            selectFieldAllowedMethod = $(this.allowedMethodsId);
            //selectFieldFreeShipment = $(this.freeShipmentId);

            originShipment = originShipmentObj[originShipmentTitle];

            while (selectFieldAllowedMethod.length> 0) {
                selectFieldAllowedMethod.remove(0);
            }
           /* TODO Finish     while (selectFieldFreeShipment.length> 0) {
                selectFieldFreeShipment.remove(0);
            }
      
            var optionFree = document.createElement("OPTION");
            optionFree.text = 'None';
            optionFree.value = '';
            try {
                selectFieldFreeShipment.add(optionFree, null);
            } catch(ex) {
                selectFieldFreeShipment.add(optionFree);
            }
*/
            for(code in originShipment){
                var option = document.createElement("OPTION");
                option.text = originShipment[code];
                option.value = code;

               // var optionFree = document.createElement("OPTION");
               // optionFree.text = originShipment[code];
               // optionFree.value = code;

             //   if( (originShipmentTitle == storedOriginShipment || originShipmentTitle=='default') && storedFreeShipment==code){
              //      optionFree.selected = true;
              //  }
                if( (originShipmentTitle == storedOriginShipment || originShipmentTitle=='default') && inArray(storedAllowedMethods,code)){
                    option.selected = true;
                }
                try {
                    selectFieldAllowedMethod.add(option, null); // standards compliant; doesn't work in IE
                    //selectFieldFreeShipment.add(optionFree, null);
                } catch(ex) {
                  selectFieldAllowedMethod.add(option); // IE only
                    //selectFieldFreeShipment.add(optionFree);
                }
            }
        },
        setFormValues: function()
        {
        	Event.observe($('ups_shipping_origin'), 'change', this.changeOriginShipment.bind(this));
            showRowArrayElements(this.onlyUpsXmlElements);
            this.changeOriginShipment();
        },
        changeOriginShipment: function(Event,key)
        {
            if(key)
                this.originShipmentTitle = key
            else
                this.originShipmentTitle = $F('ups_shipping_origin');
            this.updateAllowedMethods(this.originShipmentTitle);
        }
    }
    xml = new upsXml();
//]]>
</script>
